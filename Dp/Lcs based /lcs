class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    //TC: O(N*M)
    //SC: Space complexity -O((n,m)+(n*m))
    int lcs(int n, int m, string s1, string s2)
    {
        int dp[n+1][m+1];
        memset(dp,-1,sizeof(dp));
        
        //base case 
        if ( n == 0 || m==0)
        {
            return 0;    
        }
        
        if(dp[n][m]!=-1)
        return dp[n][m];
        
        // choice diagram
        if(s1[n-1]==s2[m-1])
            return dp[n][m]=1 + lcs(n-1,m-1,s1,s2);
        else{
            return dp[n][m]=max(lcs(n-1,m,s1,s2), lcs(n,m-1,s1,s2));
        }
    }
};
//tabulation
// tc:  O(N*M)
//sc: O(N*M)
class Solution
{
    public:
    
    int lcs(int n, int m, string s1, string s2)
    {
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=m;j++)
            {
                if(n==0 || m==0)
                    dp[n][m]=0;
            }
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(s1[i-1]==s2[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }      
               
          return dp[n][m];
            }
          
        };
        
        
    }
};
