//recursive 
// base condition --> think of smallest valid i/p
// base condition --> choice diagram 
void knapsack(int wt[], int val[], int w, int n){

    // base 

    if(n==0 || w==0){
        return 0;
    }
        //Wt of element is valid, i.e lesser than the total weight of bag
        if(wt[n-1]<=W){
        return max(val[n-1] + knapsack(wt[], val[],w-wt[n-1], n-1), knapsack(wt[], val[],w, n-1)
        }
        else if (wt[n-1]>wt){
                knapsack(wt[], val[],w, n-1)
        }
}

// memoization of the recursive code
// 1- matrix unhi variables ki banegi jo change hore recursive code me
// here its w and n

class Solution
{
    public:
     
    int t[1001][1001];
    Solution()
    {
        memset(t,-1,sizeof(t));
    }
  
    int knapSack(int W, int wt[], int val[], int n) 
    {  
        
      if(n==0||W==0) return 0;
      if(t[n][W]!=-1) return t[n][W];
      if(wt[n-1]<=W){
          return t[n][W]=max(val[n-1]+knapSack(W-wt[n-1],wt,
          val,n-1),knapSack(W,wt,val,n-1));
      }
      else if(wt[n-1]>W){
          return t[n][W]=knapSack(W,wt,val,n-1);
      }
    }

    // top down approach 
    // trick : all n,w --> i,j
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       
       int dp[n+1][W+1];
       
       for(int i = 0;i<n+1;i++){
           for(int j = 0;j<W+1;j++){
               if(i == 0 || j==0){
                   dp[i][j] = 0;
               }
           }
       }
       
       
       for(int i = 1;i<n+1;i++){
           for(int j = 1;j<W+1;j++){
               
               if(wt[i-1] <= j){
                   dp[i][j]=max(dp[i-1][j], val[i-1] + dp[i-1][j - wt[i-1]]);
               }
               else{
                   dp[i][j] = dp[i-1][j];
               }
           }
       }
       
       return dp[n][W];
    }



// VARIATIONS OF KNAPSACK ----> SUBSET SUM 

// TABULATION METHOD --->
class Solution{   
public:
    bool isSubsetSum(vector<int>arr, int sum){
        // code here
        int n=arr.size();
        if (sum > 0 && n == 0)
        return false;
        if (sum == 0)
        return true;

        bool t[n+1][sum+1];
        for(int i=0;i<=sum;i++)
            t[0][i]=false;
        for(int i=0;i<=n;i++)
            t[i][0]=true;
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                if(arr[i-1]<=j)
                t[i][j]=t[i-1][j-arr[i-1]] || t[i-1][j]; // Sir missed a t[i-1] in this line
                else if(arr[i-1]>j)
                t[i][j]=t[i-1][j];
            }
        }
        return t[n][sum];
    }
};

// EQUAL SUM PARTTION  
https://practice.geeksforgeeks.org/problems/subset-sum-problem2014/1

int SubSet (vector<int> arr , int n , int sum)
{
    int t[n+1][sum+1];
    for(int i =0;i<n+1;i++){
        for(int j=0;j<sum+1;j++){
            if(i==0)
                t[i][j] = 0;
            if(j==0)
                t[i][j] = 1;
        }
    }
    
    for(int i =1;i<n+1;i++){
        for(int j=1;j<sum+1;j++){
            if(arr[i-1] <= j){
                t[i][j] = t[i-1][j] || t[i-1][j-arr[i-1]];
            }
            else
                t[i][j] = t[i-1][j];
        }
    }
    return t[n][sum];
}

bool canPartition(vector<int>& nums) {
    int size = nums.size();
    int sum = 0;
    for(int i=0;i<size;i++){
        sum = sum + nums[i];
    }
    if(sum%2 != 0)
        return false;
    
    return SubSet(nums,size,sum/2);
}

// knapSack based problem ----->
// Count number of subsets of sum K 
https://practice.geeksforgeeks.org/problems/perfect-sum-problem5633/1



class Solution{

	public:
	int mod = 1e9+7;  // 1000000007
	int countSubset(int arr[], int n, int sum){
	    if(n==0 and sum > 0) return 0;
	    else if(n==1){
	        if(sum==0){
	            if(arr[0] == 0) return 2;
	            else return 1;
	        }else{
	            if(arr[0] == sum) return 1;
	            else return 0;
	        }
	    }
	    else if(n==0 and sum==0) return 1;
	    
	    if(arr[n-1] <= sum){
	        return countSubset(arr,n-1, sum-arr[n-1]) + countSubset(arr, n-1, sum);
	    }else
	        return countSubset(arr, n-1, sum);
	}
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        return countSubset(arr, n, sum);
        
	}
	  
};


/****************************** MEMOIZATION *************************************************/

class Solution{

	public:
	int mod = 1e9+7;  // 1000000007
	int countSubset(int arr[], int n, int sum, vector<vector<int>>&dp){
	    if(dp[n][sum] != -1) return dp[n][sum];
	    if(n==0 and sum > 0) return 0;
	    else if(n==1){
	        if(sum==0){
	            if(arr[0] == 0) return 2;
	            else return 1;
	        }else{
	            if(arr[0] == sum) return 1;
	            else return 0;
	        }
	    }
	    else if(n==0 and sum==0) return 1;
	    
	    int ans = countSubset(arr, n-1, sum, dp) % mod;
	    if(arr[n-1] <= sum){
	        ans+=countSubset(arr,n-1, sum-arr[n-1], dp);
	        ans %= mod;
	    }
	    return dp[n][sum] = ans;
	}
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        vector<vector<int>>dp(n+1, vector<int>(sum+1, -1));
        return countSubset(arr, n, sum, dp) % mod;
        
	}
	  
};
// target sum 

// https://leetcode.com/problems/target-sum/

class Solution {
public:

		int countSubset(vector<int>& nums, int n, int sum, vector<vector<int>>&dp){
	    if(dp[n][sum] != -1) return dp[n][sum];
	    if(n==0 and sum > 0) return 0;
        // this code is same as "count subset difference"
        // this extra else if comes because of the constraints that says array can have '0' as a value
	    else if(n==1){
	        if(sum==0){
	            if(nums[0] == 0) return 2;
	            else return 1;
	        }else{
	            if(nums[0] == sum) return 1;
	            else return 0;
	        }
	    }
	    else if(n==0 and sum==0) return 1;
	    
	    int ans = countSubset(nums, n-1, sum, dp);
	    if(nums[n-1] <= sum){
	        ans+=countSubset(nums,n-1, sum-nums[n-1], dp);
	    }
	    return dp[n][sum] = ans;
	}
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
				int sum = 0;
				for(auto x: nums) {sum += x;}
				if(sum < abs(target) || (target + sum) % 2 !=0 ) return 0;
				
				sum = (sum+target)/2;
				vector<vector<int>>dp(n+1, vector<int>(sum+1, -1));
        return countSubset(nums, n, sum, dp);
    }
};
